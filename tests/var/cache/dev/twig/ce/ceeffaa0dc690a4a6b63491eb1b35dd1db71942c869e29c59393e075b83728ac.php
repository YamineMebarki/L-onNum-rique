<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* vendor/symfony/web-server-bundle/Command/ServerLogCommand.php */
class __TwigTemplate_cca02b6942cd20941e1230b8166af1301208c735cfcabe9291075e64b381a4f2 extends \Twig\Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e = $this->extensions["Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension"];
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e->enter($__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "vendor/symfony/web-server-bundle/Command/ServerLogCommand.php"));

        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02 = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->enter($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "vendor/symfony/web-server-bundle/Command/ServerLogCommand.php"));

        // line 1
        echo "<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Bundle\\WebServerBundle\\Command;

use Monolog\\Formatter\\FormatterInterface;
use Symfony\\Bridge\\Monolog\\Formatter\\ConsoleFormatter;
use Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler;
use Symfony\\Component\\Console\\Command\\Command;
use Symfony\\Component\\Console\\Exception\\LogicException;
use Symfony\\Component\\Console\\Exception\\RuntimeException;
use Symfony\\Component\\Console\\Input\\InputInterface;
use Symfony\\Component\\Console\\Input\\InputOption;
use Symfony\\Component\\Console\\Output\\OutputInterface;
use Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;

/**
 * @author Grégoire Pineau <lyrixx@lyrixx.info>
 */
class ServerLogCommand extends Command
{
    private static \$bgColor = ['black', 'blue', 'cyan', 'green', 'magenta', 'red', 'white', 'yellow'];

    private \$el;
    private \$handler;

    protected static \$defaultName = 'server:log';

    public function isEnabled()
    {
        if (!class_exists(ConsoleFormatter::class)) {
            return false;
        }

        // based on a symfony/symfony package, it crashes due a missing FormatterInterface from monolog/monolog
        if (!interface_exists(FormatterInterface::class)) {
            return false;
        }

        return parent::isEnabled();
    }

    protected function configure()
    {
        if (!class_exists(ConsoleFormatter::class)) {
            return;
        }

        \$this
            ->addOption('host', null, InputOption::VALUE_REQUIRED, 'The server host', '0.0.0.0:9911')
            ->addOption('format', null, InputOption::VALUE_REQUIRED, 'The line format', ConsoleFormatter::SIMPLE_FORMAT)
            ->addOption('date-format', null, InputOption::VALUE_REQUIRED, 'The date format', ConsoleFormatter::SIMPLE_DATE)
            ->addOption('filter', null, InputOption::VALUE_REQUIRED, 'An expression to filter log. Example: \"level > 200 or channel in [\\'app\\', \\'doctrine\\']\"')
            ->setDescription('Starts a log server that displays log in real time')
            ->setHelp(<<<'EOF'
<info>%command.name%</info> starts a log server to display in real time the log
messages generated by your application:

  <info>php %command.full_name%</info>

To get the information as a machine readable format, use the
<comment>--filter</> option:

<info>php %command.full_name% --filter=port</info>
EOF
            )
        ;
    }

    protected function execute(InputInterface \$input, OutputInterface \$output)
    {
        \$filter = \$input->getOption('filter');
        if (\$filter) {
            if (!class_exists(ExpressionLanguage::class)) {
                throw new LogicException('Package \"symfony/expression-language\" is required to use the \"filter\" option.');
            }
            \$this->el = new ExpressionLanguage();
        }

        \$this->handler = new ConsoleHandler(\$output);

        \$this->handler->setFormatter(new ConsoleFormatter([
            'format' => str_replace('\\n', \"\\n\", \$input->getOption('format')),
            'date_format' => \$input->getOption('date-format'),
            'colors' => \$output->isDecorated(),
            'multiline' => OutputInterface::VERBOSITY_DEBUG <= \$output->getVerbosity(),
        ]));

        if (false === strpos(\$host = \$input->getOption('host'), '://')) {
            \$host = 'tcp://'.\$host;
        }

        if (!\$socket = stream_socket_server(\$host, \$errno, \$errstr)) {
            throw new RuntimeException(sprintf('Server start failed on \"%s\": %s %s.', \$host, \$errstr, \$errno));
        }

        foreach (\$this->getLogs(\$socket) as \$clientId => \$message) {
            \$record = unserialize(base64_decode(\$message));

            // Impossible to decode the message, give up.
            if (false === \$record) {
                continue;
            }

            if (\$filter && !\$this->el->evaluate(\$filter, \$record)) {
                continue;
            }

            \$this->displayLog(\$input, \$output, \$clientId, \$record);
        }
    }

    private function getLogs(\$socket)
    {
        \$sockets = [(int) \$socket => \$socket];
        \$write = [];

        while (true) {
            \$read = \$sockets;
            stream_select(\$read, \$write, \$write, null);

            foreach (\$read as \$stream) {
                if (\$socket === \$stream) {
                    \$stream = stream_socket_accept(\$socket);
                    \$sockets[(int) \$stream] = \$stream;
                } elseif (feof(\$stream)) {
                    unset(\$sockets[(int) \$stream]);
                    fclose(\$stream);
                } else {
                    yield (int) \$stream => fgets(\$stream);
                }
            }
        }
    }

    private function displayLog(InputInterface \$input, OutputInterface \$output, \$clientId, array \$record)
    {
        if (\$this->handler->isHandling(\$record)) {
            if (isset(\$record['log_id'])) {
                \$clientId = unpack('H*', \$record['log_id'])[1];
            }
            \$logBlock = sprintf('<bg=%s> </>', self::\$bgColor[\$clientId % 8]);
            \$output->write(\$logBlock);
        }

        \$this->handler->handle(\$record);
    }
}
";
        
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e->leave($__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e_prof);

        
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->leave($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof);

    }

    public function getTemplateName()
    {
        return "vendor/symfony/web-server-bundle/Command/ServerLogCommand.php";
    }

    public function getDebugInfo()
    {
        return array (  43 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Bundle\\WebServerBundle\\Command;

use Monolog\\Formatter\\FormatterInterface;
use Symfony\\Bridge\\Monolog\\Formatter\\ConsoleFormatter;
use Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler;
use Symfony\\Component\\Console\\Command\\Command;
use Symfony\\Component\\Console\\Exception\\LogicException;
use Symfony\\Component\\Console\\Exception\\RuntimeException;
use Symfony\\Component\\Console\\Input\\InputInterface;
use Symfony\\Component\\Console\\Input\\InputOption;
use Symfony\\Component\\Console\\Output\\OutputInterface;
use Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;

/**
 * @author Grégoire Pineau <lyrixx@lyrixx.info>
 */
class ServerLogCommand extends Command
{
    private static \$bgColor = ['black', 'blue', 'cyan', 'green', 'magenta', 'red', 'white', 'yellow'];

    private \$el;
    private \$handler;

    protected static \$defaultName = 'server:log';

    public function isEnabled()
    {
        if (!class_exists(ConsoleFormatter::class)) {
            return false;
        }

        // based on a symfony/symfony package, it crashes due a missing FormatterInterface from monolog/monolog
        if (!interface_exists(FormatterInterface::class)) {
            return false;
        }

        return parent::isEnabled();
    }

    protected function configure()
    {
        if (!class_exists(ConsoleFormatter::class)) {
            return;
        }

        \$this
            ->addOption('host', null, InputOption::VALUE_REQUIRED, 'The server host', '0.0.0.0:9911')
            ->addOption('format', null, InputOption::VALUE_REQUIRED, 'The line format', ConsoleFormatter::SIMPLE_FORMAT)
            ->addOption('date-format', null, InputOption::VALUE_REQUIRED, 'The date format', ConsoleFormatter::SIMPLE_DATE)
            ->addOption('filter', null, InputOption::VALUE_REQUIRED, 'An expression to filter log. Example: \"level > 200 or channel in [\\'app\\', \\'doctrine\\']\"')
            ->setDescription('Starts a log server that displays log in real time')
            ->setHelp(<<<'EOF'
<info>%command.name%</info> starts a log server to display in real time the log
messages generated by your application:

  <info>php %command.full_name%</info>

To get the information as a machine readable format, use the
<comment>--filter</> option:

<info>php %command.full_name% --filter=port</info>
EOF
            )
        ;
    }

    protected function execute(InputInterface \$input, OutputInterface \$output)
    {
        \$filter = \$input->getOption('filter');
        if (\$filter) {
            if (!class_exists(ExpressionLanguage::class)) {
                throw new LogicException('Package \"symfony/expression-language\" is required to use the \"filter\" option.');
            }
            \$this->el = new ExpressionLanguage();
        }

        \$this->handler = new ConsoleHandler(\$output);

        \$this->handler->setFormatter(new ConsoleFormatter([
            'format' => str_replace('\\n', \"\\n\", \$input->getOption('format')),
            'date_format' => \$input->getOption('date-format'),
            'colors' => \$output->isDecorated(),
            'multiline' => OutputInterface::VERBOSITY_DEBUG <= \$output->getVerbosity(),
        ]));

        if (false === strpos(\$host = \$input->getOption('host'), '://')) {
            \$host = 'tcp://'.\$host;
        }

        if (!\$socket = stream_socket_server(\$host, \$errno, \$errstr)) {
            throw new RuntimeException(sprintf('Server start failed on \"%s\": %s %s.', \$host, \$errstr, \$errno));
        }

        foreach (\$this->getLogs(\$socket) as \$clientId => \$message) {
            \$record = unserialize(base64_decode(\$message));

            // Impossible to decode the message, give up.
            if (false === \$record) {
                continue;
            }

            if (\$filter && !\$this->el->evaluate(\$filter, \$record)) {
                continue;
            }

            \$this->displayLog(\$input, \$output, \$clientId, \$record);
        }
    }

    private function getLogs(\$socket)
    {
        \$sockets = [(int) \$socket => \$socket];
        \$write = [];

        while (true) {
            \$read = \$sockets;
            stream_select(\$read, \$write, \$write, null);

            foreach (\$read as \$stream) {
                if (\$socket === \$stream) {
                    \$stream = stream_socket_accept(\$socket);
                    \$sockets[(int) \$stream] = \$stream;
                } elseif (feof(\$stream)) {
                    unset(\$sockets[(int) \$stream]);
                    fclose(\$stream);
                } else {
                    yield (int) \$stream => fgets(\$stream);
                }
            }
        }
    }

    private function displayLog(InputInterface \$input, OutputInterface \$output, \$clientId, array \$record)
    {
        if (\$this->handler->isHandling(\$record)) {
            if (isset(\$record['log_id'])) {
                \$clientId = unpack('H*', \$record['log_id'])[1];
            }
            \$logBlock = sprintf('<bg=%s> </>', self::\$bgColor[\$clientId % 8]);
            \$output->write(\$logBlock);
        }

        \$this->handler->handle(\$record);
    }
}
", "vendor/symfony/web-server-bundle/Command/ServerLogCommand.php", "/var/www/public/DevLaon/templates/vendor/symfony/web-server-bundle/Command/ServerLogCommand.php");
    }
}
