<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php */
class __TwigTemplate_baa3d405ab9081bd6f7cbf81c3385a1febf273b2541955287d296b03e1f06eca extends \Twig\Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e = $this->extensions["Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension"];
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e->enter($__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php"));

        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02 = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->enter($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php"));

        // line 1
        echo "<?php


class Swift_Mime_EmbeddedFileTest extends Swift_Mime_AttachmentTest
{
    public function testNestingLevelIsAttachment()
    {
        // previous loop would fail if there is an issue
        \$this->addToAssertionCount(1);
    }

    public function testNestingLevelIsEmbedded()
    {
        \$file = \$this->createEmbeddedFile(\$this->createHeaderSet(),
            \$this->createEncoder(), \$this->createCache()
            );
        \$this->assertEquals(
            Swift_Mime_SimpleMimeEntity::LEVEL_RELATED, \$file->getNestingLevel()
            );
    }

    public function testIdIsAutoGenerated()
    {
        \$headers = \$this->createHeaderSet([], false);
        \$headers->shouldReceive('addIdHeader')
                ->once()
                ->with('Content-ID', '/^.*?@.*?\$/D');

        \$file = \$this->createEmbeddedFile(\$headers, \$this->createEncoder(),
            \$this->createCache()
            );
    }

    public function testDefaultDispositionIsInline()
    {
        \$headers = \$this->createHeaderSet([], false);
        \$headers->shouldReceive('addParameterizedHeader')
                ->once()
                ->with('Content-Disposition', 'inline');
        \$headers->shouldReceive('addParameterizedHeader')
                ->zeroOrMoreTimes();

        \$file = \$this->createEmbeddedFile(\$headers, \$this->createEncoder(),
            \$this->createCache()
            );
    }

    protected function createAttachment(\$headers, \$encoder, \$cache, \$mimeTypes = [])
    {
        return \$this->createEmbeddedFile(\$headers, \$encoder, \$cache, \$mimeTypes);
    }

    private function createEmbeddedFile(\$headers, \$encoder, \$cache)
    {
        \$idGenerator = new Swift_Mime_IdGenerator('example.com');

        return new Swift_Mime_EmbeddedFile(\$headers, \$encoder, \$cache, \$idGenerator);
    }
}
";
        
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e->leave($__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e_prof);

        
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->leave($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof);

    }

    public function getTemplateName()
    {
        return "vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php";
    }

    public function getDebugInfo()
    {
        return array (  43 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("<?php


class Swift_Mime_EmbeddedFileTest extends Swift_Mime_AttachmentTest
{
    public function testNestingLevelIsAttachment()
    {
        // previous loop would fail if there is an issue
        \$this->addToAssertionCount(1);
    }

    public function testNestingLevelIsEmbedded()
    {
        \$file = \$this->createEmbeddedFile(\$this->createHeaderSet(),
            \$this->createEncoder(), \$this->createCache()
            );
        \$this->assertEquals(
            Swift_Mime_SimpleMimeEntity::LEVEL_RELATED, \$file->getNestingLevel()
            );
    }

    public function testIdIsAutoGenerated()
    {
        \$headers = \$this->createHeaderSet([], false);
        \$headers->shouldReceive('addIdHeader')
                ->once()
                ->with('Content-ID', '/^.*?@.*?\$/D');

        \$file = \$this->createEmbeddedFile(\$headers, \$this->createEncoder(),
            \$this->createCache()
            );
    }

    public function testDefaultDispositionIsInline()
    {
        \$headers = \$this->createHeaderSet([], false);
        \$headers->shouldReceive('addParameterizedHeader')
                ->once()
                ->with('Content-Disposition', 'inline');
        \$headers->shouldReceive('addParameterizedHeader')
                ->zeroOrMoreTimes();

        \$file = \$this->createEmbeddedFile(\$headers, \$this->createEncoder(),
            \$this->createCache()
            );
    }

    protected function createAttachment(\$headers, \$encoder, \$cache, \$mimeTypes = [])
    {
        return \$this->createEmbeddedFile(\$headers, \$encoder, \$cache, \$mimeTypes);
    }

    private function createEmbeddedFile(\$headers, \$encoder, \$cache)
    {
        \$idGenerator = new Swift_Mime_IdGenerator('example.com');

        return new Swift_Mime_EmbeddedFile(\$headers, \$encoder, \$cache, \$idGenerator);
    }
}
", "vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php", "/var/www/public/DevLaon/templates/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Mime/EmbeddedFileTest.php");
    }
}
