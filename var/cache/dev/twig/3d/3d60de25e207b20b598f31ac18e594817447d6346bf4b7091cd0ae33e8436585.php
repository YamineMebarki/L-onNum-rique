<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* vendor/symfony/cache/Traits/PhpArrayTrait.php */
class __TwigTemplate_a6743710a9caf765fecba91c68609709fac0daa7d363e721eed199d3df7ae56c extends \Twig\Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e = $this->extensions["Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension"];
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e->enter($__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "vendor/symfony/cache/Traits/PhpArrayTrait.php"));

        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02 = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->enter($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "vendor/symfony/cache/Traits/PhpArrayTrait.php"));

        // line 1
        echo "<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Component\\Cache\\Traits;

use Symfony\\Component\\Cache\\CacheItem;
use Symfony\\Component\\Cache\\Exception\\InvalidArgumentException;
use Symfony\\Component\\VarExporter\\VarExporter;

/**
 * @author Titouan Galopin <galopintitouan@gmail.com>
 * @author Nicolas Grekas <p@tchwork.com>
 *
 * @internal
 */
trait PhpArrayTrait
{
    use ProxyTrait;

    private \$file;
    private \$keys;
    private \$values;

    /**
     * Store an array of cached values.
     *
     * @param array \$values The cached values
     */
    public function warmUp(array \$values)
    {
        if (file_exists(\$this->file)) {
            if (!is_file(\$this->file)) {
                throw new InvalidArgumentException(sprintf('Cache path exists and is not a file: %s.', \$this->file));
            }

            if (!is_writable(\$this->file)) {
                throw new InvalidArgumentException(sprintf('Cache file is not writable: %s.', \$this->file));
            }
        } else {
            \$directory = \\dirname(\$this->file);

            if (!is_dir(\$directory) && !@mkdir(\$directory, 0777, true)) {
                throw new InvalidArgumentException(sprintf('Cache directory does not exist and cannot be created: %s.', \$directory));
            }

            if (!is_writable(\$directory)) {
                throw new InvalidArgumentException(sprintf('Cache directory is not writable: %s.', \$directory));
            }
        }

        \$dumpedValues = '';
        \$dumpedMap = [];
        \$dump = <<<'EOF'
<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[


EOF;

        foreach (\$values as \$key => \$value) {
            CacheItem::validateKey(\\is_int(\$key) ? (string) \$key : \$key);
            \$isStaticValue = true;

            if (null === \$value) {
                \$value = \"'N;'\";
            } elseif (\\is_object(\$value) || \\is_array(\$value)) {
                try {
                    \$value = VarExporter::export(\$value, \$isStaticValue);
                } catch (\\Exception \$e) {
                    throw new InvalidArgumentException(sprintf('Cache key \"%s\" has non-serializable %s value.', \$key, \\is_object(\$value) ? \\get_class(\$value) : 'array'), 0, \$e);
                }
            } elseif (\\is_string(\$value)) {
                // Wrap \"N;\" in a closure to not confuse it with an encoded `null`
                if ('N;' === \$value) {
                    \$isStaticValue = false;
                }
                \$value = var_export(\$value, true);
            } elseif (!is_scalar(\$value)) {
                throw new InvalidArgumentException(sprintf('Cache key \"%s\" has non-serializable %s value.', \$key, \\gettype(\$value)));
            } else {
                \$value = var_export(\$value, true);
            }

            if (!\$isStaticValue) {
                \$value = str_replace(\"\\n\", \"\\n    \", \$value);
                \$value = \"static function () {\\n    return {\$value};\\n}\";
            }
            \$hash = hash('md5', \$value);

            if (null === \$id = \$dumpedMap[\$hash] ?? null) {
                \$id = \$dumpedMap[\$hash] = \\count(\$dumpedMap);
                \$dumpedValues .= \"{\$id} => {\$value},\\n\";
            }

            \$dump .= var_export(\$key, true).\" => {\$id},\\n\";
        }

        \$dump .= \"\\n], [\\n\\n{\$dumpedValues}\\n]];\\n\";

        \$tmpFile = uniqid(\$this->file, true);

        file_put_contents(\$tmpFile, \$dump);
        @chmod(\$tmpFile, 0666 & ~umask());
        unset(\$serialized, \$value, \$dump);

        @rename(\$tmpFile, \$this->file);

        \$this->initialize();
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        \$this->keys = \$this->values = [];

        \$cleared = @unlink(\$this->file) || !file_exists(\$this->file);

        return \$this->pool->clear() && \$cleared;
    }

    /**
     * Load the cache file.
     */
    private function initialize()
    {
        if (!file_exists(\$this->file)) {
            \$this->keys = \$this->values = [];

            return;
        }
        \$values = (include \$this->file) ?: [[], []];

        if (2 !== \\count(\$values) || !isset(\$values[0], \$values[1])) {
            \$this->keys = \$this->values = [];
        } else {
            list(\$this->keys, \$this->values) = \$values;
        }
    }
}
";
        
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e->leave($__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e_prof);

        
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->leave($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof);

    }

    public function getTemplateName()
    {
        return "vendor/symfony/cache/Traits/PhpArrayTrait.php";
    }

    public function getDebugInfo()
    {
        return array (  43 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Component\\Cache\\Traits;

use Symfony\\Component\\Cache\\CacheItem;
use Symfony\\Component\\Cache\\Exception\\InvalidArgumentException;
use Symfony\\Component\\VarExporter\\VarExporter;

/**
 * @author Titouan Galopin <galopintitouan@gmail.com>
 * @author Nicolas Grekas <p@tchwork.com>
 *
 * @internal
 */
trait PhpArrayTrait
{
    use ProxyTrait;

    private \$file;
    private \$keys;
    private \$values;

    /**
     * Store an array of cached values.
     *
     * @param array \$values The cached values
     */
    public function warmUp(array \$values)
    {
        if (file_exists(\$this->file)) {
            if (!is_file(\$this->file)) {
                throw new InvalidArgumentException(sprintf('Cache path exists and is not a file: %s.', \$this->file));
            }

            if (!is_writable(\$this->file)) {
                throw new InvalidArgumentException(sprintf('Cache file is not writable: %s.', \$this->file));
            }
        } else {
            \$directory = \\dirname(\$this->file);

            if (!is_dir(\$directory) && !@mkdir(\$directory, 0777, true)) {
                throw new InvalidArgumentException(sprintf('Cache directory does not exist and cannot be created: %s.', \$directory));
            }

            if (!is_writable(\$directory)) {
                throw new InvalidArgumentException(sprintf('Cache directory is not writable: %s.', \$directory));
            }
        }

        \$dumpedValues = '';
        \$dumpedMap = [];
        \$dump = <<<'EOF'
<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[


EOF;

        foreach (\$values as \$key => \$value) {
            CacheItem::validateKey(\\is_int(\$key) ? (string) \$key : \$key);
            \$isStaticValue = true;

            if (null === \$value) {
                \$value = \"'N;'\";
            } elseif (\\is_object(\$value) || \\is_array(\$value)) {
                try {
                    \$value = VarExporter::export(\$value, \$isStaticValue);
                } catch (\\Exception \$e) {
                    throw new InvalidArgumentException(sprintf('Cache key \"%s\" has non-serializable %s value.', \$key, \\is_object(\$value) ? \\get_class(\$value) : 'array'), 0, \$e);
                }
            } elseif (\\is_string(\$value)) {
                // Wrap \"N;\" in a closure to not confuse it with an encoded `null`
                if ('N;' === \$value) {
                    \$isStaticValue = false;
                }
                \$value = var_export(\$value, true);
            } elseif (!is_scalar(\$value)) {
                throw new InvalidArgumentException(sprintf('Cache key \"%s\" has non-serializable %s value.', \$key, \\gettype(\$value)));
            } else {
                \$value = var_export(\$value, true);
            }

            if (!\$isStaticValue) {
                \$value = str_replace(\"\\n\", \"\\n    \", \$value);
                \$value = \"static function () {\\n    return {\$value};\\n}\";
            }
            \$hash = hash('md5', \$value);

            if (null === \$id = \$dumpedMap[\$hash] ?? null) {
                \$id = \$dumpedMap[\$hash] = \\count(\$dumpedMap);
                \$dumpedValues .= \"{\$id} => {\$value},\\n\";
            }

            \$dump .= var_export(\$key, true).\" => {\$id},\\n\";
        }

        \$dump .= \"\\n], [\\n\\n{\$dumpedValues}\\n]];\\n\";

        \$tmpFile = uniqid(\$this->file, true);

        file_put_contents(\$tmpFile, \$dump);
        @chmod(\$tmpFile, 0666 & ~umask());
        unset(\$serialized, \$value, \$dump);

        @rename(\$tmpFile, \$this->file);

        \$this->initialize();
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        \$this->keys = \$this->values = [];

        \$cleared = @unlink(\$this->file) || !file_exists(\$this->file);

        return \$this->pool->clear() && \$cleared;
    }

    /**
     * Load the cache file.
     */
    private function initialize()
    {
        if (!file_exists(\$this->file)) {
            \$this->keys = \$this->values = [];

            return;
        }
        \$values = (include \$this->file) ?: [[], []];

        if (2 !== \\count(\$values) || !isset(\$values[0], \$values[1])) {
            \$this->keys = \$this->values = [];
        } else {
            list(\$this->keys, \$this->values) = \$values;
        }
    }
}
", "vendor/symfony/cache/Traits/PhpArrayTrait.php", "/var/www/public/DevLaon/templates/vendor/symfony/cache/Traits/PhpArrayTrait.php");
    }
}
