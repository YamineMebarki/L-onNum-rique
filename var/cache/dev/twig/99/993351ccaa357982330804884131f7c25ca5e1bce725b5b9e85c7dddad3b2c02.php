<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* vendor/symfony/twig-bundle/CacheWarmer/TemplateCacheCacheWarmer.php */
class __TwigTemplate_e857b427ba92dec5f34b217c8a17a62d2c8b30c2202df1a1e8e7d2ce8e0fecbe extends \Twig\Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e = $this->extensions["Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension"];
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e->enter($__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "vendor/symfony/twig-bundle/CacheWarmer/TemplateCacheCacheWarmer.php"));

        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02 = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->enter($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "vendor/symfony/twig-bundle/CacheWarmer/TemplateCacheCacheWarmer.php"));

        // line 1
        echo "<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Bundle\\TwigBundle\\CacheWarmer;

use Psr\\Container\\ContainerInterface;
use Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplateFinderInterface;
use Symfony\\Component\\DependencyInjection\\ServiceSubscriberInterface;
use Symfony\\Component\\Finder\\Finder;
use Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerInterface;
use Twig\\Environment;
use Twig\\Error\\Error;

/**
 * Generates the Twig cache for all templates.
 *
 * This warmer must be registered after TemplatePathsCacheWarmer,
 * as the Twig loader will need the cache generated by it.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
class TemplateCacheCacheWarmer implements CacheWarmerInterface, ServiceSubscriberInterface
{
    protected \$container;
    protected \$finder;
    private \$paths;

    /**
     * @param array \$paths Additional twig paths to warm
     */
    public function __construct(ContainerInterface \$container, TemplateFinderInterface \$finder = null, array \$paths = [])
    {
        // We don't inject the Twig environment directly as it depends on the
        // template locator (via the loader) which might be a cached one.
        // The cached template locator is available once the TemplatePathsCacheWarmer
        // has been warmed up.
        // But it can also be null if templating has been disabled.
        \$this->container = \$container;
        \$this->finder = \$finder;
        \$this->paths = \$paths;
    }

    /**
     * Warms up the cache.
     *
     * @param string \$cacheDir The cache directory
     */
    public function warmUp(\$cacheDir)
    {
        if (null === \$this->finder) {
            return;
        }

        \$twig = \$this->container->get('twig');

        \$templates = \$this->finder->findAllTemplates();

        foreach (\$this->paths as \$path => \$namespace) {
            \$templates = array_merge(\$templates, \$this->findTemplatesInFolder(\$namespace, \$path));
        }

        foreach (\$templates as \$template) {
            try {
                \$twig->loadTemplate(\$template);
            } catch (Error \$e) {
                // problem during compilation, give up
            }
        }
    }

    /**
     * Checks whether this warmer is optional or not.
     *
     * @return bool always true
     */
    public function isOptional()
    {
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public static function getSubscribedServices()
    {
        return [
            'twig' => Environment::class,
        ];
    }

    /**
     * Find templates in the given directory.
     *
     * @param string \$namespace The namespace for these templates
     * @param string \$dir       The folder where to look for templates
     *
     * @return array An array of templates
     */
    private function findTemplatesInFolder(\$namespace, \$dir)
    {
        if (!is_dir(\$dir)) {
            return [];
        }

        \$templates = [];
        \$finder = new Finder();

        foreach (\$finder->files()->followLinks()->in(\$dir) as \$file) {
            \$name = \$file->getRelativePathname();
            \$templates[] = \$namespace ? sprintf('@%s/%s', \$namespace, \$name) : \$name;
        }

        return \$templates;
    }
}
";
        
        $__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e->leave($__internal_085b0142806202599c7fe3b329164a92397d8978207a37e79d70b8c52599e33e_prof);

        
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->leave($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof);

    }

    public function getTemplateName()
    {
        return "vendor/symfony/twig-bundle/CacheWarmer/TemplateCacheCacheWarmer.php";
    }

    public function getDebugInfo()
    {
        return array (  43 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Bundle\\TwigBundle\\CacheWarmer;

use Psr\\Container\\ContainerInterface;
use Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplateFinderInterface;
use Symfony\\Component\\DependencyInjection\\ServiceSubscriberInterface;
use Symfony\\Component\\Finder\\Finder;
use Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerInterface;
use Twig\\Environment;
use Twig\\Error\\Error;

/**
 * Generates the Twig cache for all templates.
 *
 * This warmer must be registered after TemplatePathsCacheWarmer,
 * as the Twig loader will need the cache generated by it.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
class TemplateCacheCacheWarmer implements CacheWarmerInterface, ServiceSubscriberInterface
{
    protected \$container;
    protected \$finder;
    private \$paths;

    /**
     * @param array \$paths Additional twig paths to warm
     */
    public function __construct(ContainerInterface \$container, TemplateFinderInterface \$finder = null, array \$paths = [])
    {
        // We don't inject the Twig environment directly as it depends on the
        // template locator (via the loader) which might be a cached one.
        // The cached template locator is available once the TemplatePathsCacheWarmer
        // has been warmed up.
        // But it can also be null if templating has been disabled.
        \$this->container = \$container;
        \$this->finder = \$finder;
        \$this->paths = \$paths;
    }

    /**
     * Warms up the cache.
     *
     * @param string \$cacheDir The cache directory
     */
    public function warmUp(\$cacheDir)
    {
        if (null === \$this->finder) {
            return;
        }

        \$twig = \$this->container->get('twig');

        \$templates = \$this->finder->findAllTemplates();

        foreach (\$this->paths as \$path => \$namespace) {
            \$templates = array_merge(\$templates, \$this->findTemplatesInFolder(\$namespace, \$path));
        }

        foreach (\$templates as \$template) {
            try {
                \$twig->loadTemplate(\$template);
            } catch (Error \$e) {
                // problem during compilation, give up
            }
        }
    }

    /**
     * Checks whether this warmer is optional or not.
     *
     * @return bool always true
     */
    public function isOptional()
    {
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public static function getSubscribedServices()
    {
        return [
            'twig' => Environment::class,
        ];
    }

    /**
     * Find templates in the given directory.
     *
     * @param string \$namespace The namespace for these templates
     * @param string \$dir       The folder where to look for templates
     *
     * @return array An array of templates
     */
    private function findTemplatesInFolder(\$namespace, \$dir)
    {
        if (!is_dir(\$dir)) {
            return [];
        }

        \$templates = [];
        \$finder = new Finder();

        foreach (\$finder->files()->followLinks()->in(\$dir) as \$file) {
            \$name = \$file->getRelativePathname();
            \$templates[] = \$namespace ? sprintf('@%s/%s', \$namespace, \$name) : \$name;
        }

        return \$templates;
    }
}
", "vendor/symfony/twig-bundle/CacheWarmer/TemplateCacheCacheWarmer.php", "/var/www/public/DevLaon/templates/vendor/symfony/twig-bundle/CacheWarmer/TemplateCacheCacheWarmer.php");
    }
}
